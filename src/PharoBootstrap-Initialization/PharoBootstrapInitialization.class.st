"
I hold the code needed to initialize correctly a fresh generated bootstrap image.

To run the initialization, run:
	PharoBootstrapInitialization run
	
 ====== Potential problems:
1/	SmalltalkImage classVarNamed: 'StartUpList' => 
			MessageNotUnderstood: Association>>read
			Association(Object)>>doesNotUnderstand: #read
			SmalltalkImage class(Class)>>readClassVariableNamed:
			SmalltalkImage class(Class)>>classVarNamed:
		should be a LiteralVariable (slot) instead of an Association

2/	Trait method compilation does not propagate to users of the trait (ex: TBehavior>>#becomeCompact).

3/	Class class selectors => #()
		the method dictionary is empty.
		maybe the same pb as the following: Class traits

4/	TClass classTrait selectors => #()
		it looks like methods on class traits are not well compiled
"
Class {
	#name : #PharoBootstrapInitialization,
	#superclass : #Object,
	#category : #'PharoBootstrap-Initialization'
}

{ #category : #'temporary-patch' }
PharoBootstrapInitialization class >> applyPatches [

	self
		fixSetInitialCodeFormatter;
		fixUpdateInstancesOfSpecialClasses;
		fixPharoClassInstallerMethodCopying
]

{ #category : #'class-initialization' }
PharoBootstrapInitialization class >> classesToInitializeWithDependencies [
	self flag: 'to remove once #classesInitializationOrder works'.
	"This list is generated by the ClassInitializationSorter ran into the target image.
	The order is determined by dependencies of the class initialization"
	^ #(#SmalltalkImage
#Delay
#LanguageEnvironment
#Character
#OSPlatform
#Object
#EncodedCharSet
#ByteString
#SmallInteger
#WeakArray
#String
#MCPackageManager
#Integer
#EndianDetector
#MCMethodDefinition
#DiskStore
#ZnByteEncoder
#Stdio
#Context
#Key
#NonInteractiveTranscript
#Latin2Environment
#UUIDGenerator
#Symbol
#Locale
#MCDataStream
#BasicCommandLineHandler
#Unicode
#WeakAnnouncementSubscription
#WeakFinalizationList
#CP1250TextConverter
#RBScanner
#MCWorkingCopy
#WideSymbol
#DigitalSignatureAlgorithm
#Latin9Environment
#FileLocator
#Latin1
#ZnBase64Encoder
#ASTCache
#MCLazyVersionInfo
#ZnUTF8Encoder)
]

{ #category : #'class-initialization' }
PharoBootstrapInitialization class >> classesToInitializeWithNoDependency [
	self flag: 'to remove once #classesInitializationOrder works'.
	"This list is generated by the ClassInitializationSorter ran into the target image."
	^ #(
#InflateStream
#ByteTextConverter "also initialize all subclasses, dependency not detected by ClassInitializationSorter"
#ZipWriteStream
#SetElement
#ExternalSemaphoreTable
#MacRomanTextConverter
#Collection
#ISOLanguageDefinition
#CompiledMethod
#MD5NonPrimitive
#DangerousClassNotifier
#Categorizer
#Slot
#CP1252TextConverter
#SHA1
#TraitBehavior
#RPackage
#CompilationContext
#OCASTTranslator
#RPackageOrganizer "useless"
#Deprecation
#FileHandle
#ChronologyConstants
#BISimpleFormatter
#FastInflateStream
#FileStream
#ISO88592TextConverter
#ZipConstants
#ISO885915TextConverter
#AsyncFile
#InstructionStream
#SharedRandom
#TemporaryVariable
#LiteralVariable
#MCCacheRepository
#ProcessorScheduler "already initialized"
#Behavior
#ZnMimeType
#Halt
#Float
#ProcessSpecificVariable
#DateAndTime
#ChangeSet
#HashTableSizes
#ZipFileConstants
#GZipConstants)
]

{ #category : #'temporary-patch' }
PharoBootstrapInitialization class >> fixPharoClassInstallerMethodCopying [

	"By default the class installer tries to recompile existing code when loading a new version of a class.
	Since the initial bootstrap has no sources, this will fail.
	This patch creates new methods by copying them and fixing the corresponding literals"
	ShiftClassBuilder compile: 'compileMethods
	|newClassVariables|
	newClassVariables := classModification classVariables asDictionary.
	oldClass localMethods do: [ :m | | copy |
		copy := m copy.
		copy methodClass: newClass.
		copy literals withIndexDo: [:l :i |
			(l isKindOf: ClassVariable)
				ifTrue: [ | newLiteral |
					newLiteral := newClass innerBindingOf: l key.
					m literalAt: i put: newLiteral ].
		].
		newClass addSelectorSilently: copy selector withMethod: copy.
	].
	oldClass classSide localMethods do: [ :m | | copy |
		copy := m copy.
		copy methodClass: newClass classSide.
		copy literals withIndexDo: [:l :i |
			(l isKindOf: ClassVariable)
				ifTrue: [ | newLiteral |
					newLiteral := newClass innerBindingOf: l key.
					m literalAt: i put: newLiteral ].
		].
		newClass classSide addSelectorSilently: copy selector withMethod: copy.
	].'.
]

{ #category : #'temporary-patch' }
PharoBootstrapInitialization class >> fixSetInitialCodeFormatter [
	"We need to install a formatter object.
	If not, source code cannot be formatted 
		=> AST from existing methods cannot be built
		=> errors cannot be displayed
		..."
	RBMethodNode formatterClass: (Smalltalk globals at: #BISimpleFormatter).
]

{ #category : #'temporary-patch' }
PharoBootstrapInitialization class >> fixUpdateInstancesOfSpecialClasses [

	"Special classes such as compiled method and context should not update their instances when the system reloads them.
	If we do not do this, the initial Monticello reloading will fail because it will recognize that these classes changed.
	As such, it will try to instantiate new compiled methods and contexts, but this will fail because they should be instantiated in a special manner."
	CompiledMethod class compile: 'updateInstancesFrom: oldClass
	"I do nothing, I''m a compiled method"'.
	
	Context class compile: 'updateInstancesFrom: oldClass
	"I do nothing, I''m a context"'.
]

{ #category : #'running - tests' }
PharoBootstrapInitialization class >> ignoredTests [
	^ #(SemaphoreTest ProcessTest)
]

{ #category : #'class-initialization' }
PharoBootstrapInitialization class >> initializeClasses [
	" #classesInitializationOrder method is generated through a jenkins job 
	with the help of the ClassInitializationSorter class (SH Pharo/Bootstrap)."
	"see  https://ci.inria.fr/pharo/view/Pharo bootstrap/job/60-Bootstrap-Cargo-LoadInstructions"
	self runInitializeOnClasses: self classesInitializationOrder.
	UIManager default inform: 'initialization done!'
]

{ #category : #'public api' }
PharoBootstrapInitialization class >> initializeCommandLineHandlerAndErrorHandling [
	"This method is run before the new bootstrapped image is saved!"
	ProcessorScheduler initialize.
	
	Object initialize.
	
	ChronologyConstants initialize.
	DateAndTime initialize.
	SessionManager default installNewSession.
	
	Delay initialize.
	SmallInteger initialize.
	
	ProcessorScheduler startUp.
	
	OSPlatform startUp: true.
	
	String initialize.
	ByteString initialize. "needed by TextConverter to install LineEnd convention (called by Smalltalk openLog)"
	ZnUTF8Encoder initialize.	
	
	"Weak array class initialization 2 lines"
	Smalltalk specialObjectsArray at: 42 put: Semaphore new."to put in EPObjectSpace>>#createSpecialObjectsArray?"
	WeakArray restartFinalizationProcess.
	
	Smalltalk globals 
		at: #Transcript
		put: (NonInteractiveTranscript stdout install).
	Float initialize.

	SetElement initialize.
	ExternalSemaphoreTable initialize.
	Collection initialize.
	CompiledMethod initialize.
	Categorizer initialize.
	Slot initialize.
	RPackage initialize.
	Behavior initialize.

	UIManager classVarNamed: 'Default' put: NonInteractiveUIManager new.
	UIManager default activate.

	Smalltalk sourceFileVersionString: 'PharoV60'.
	(Smalltalk class classVariableNamed: 'LastImagePath') value: Smalltalk primImagePath. "set the default value"
	SourceFiles := SourceFileArray new.
	
	"Create the ASTCache and add it to the startup list"
	ASTCache initialize.
	
	Color initialize.
	InstructionStream initialize.
	SmallInteger initialize.

	"FFI"
	ExternalObject initialize.
	ExternalFunction initialize.
	ExternalType initialize.

	"Initialize basic command line behaviour"
	Stdio initialize.
	NonInteractiveTranscript initialize.
	BasicCommandLineHandler initialize.
	Smalltalk snapshot: true andQuit: true.
	Processor terminateActive.

]

{ #category : #'public api' }
PharoBootstrapInitialization class >> initializeImageOfType: typeName majorVersion: major minor: minor suffix: suffix buid: build commitHash: hash [

	"The image main entry point called by an image builder. The arguments specify the image
	version description.
	This method is run before the new bootstrapped image is saved!"

	SystemVersion 
		writeClassVariableNamed: #Current
		value: (SystemVersion new
					type: typeName;
					major: major;
					minor: minor;
					suffix: suffix;
					build: build;
					commitHash: hash;
					yourself).
	
	self initializeCommandLineHandlerAndErrorHandling.
]

{ #category : #loading }
PharoBootstrapInitialization class >> loadPackage: mcVersion from: aRepository [
	mcVersion ifNotEmpty: [
		[ 
			UIManager default inform: 'Loading... ' , mcVersion.
			MCVersionLoader new
				addVersion: (aRepository versionFrom: mcVersion);
				load
		] on: Warning do: [ :warning | 
				UIManager default inform: 'Warning: ', warning messageText.
				warning resume.
		].
		UIManager default inform: 'Loaded ', mcVersion]

]

{ #category : #loading }
PharoBootstrapInitialization class >> loadSUnitPackage [
	self
		loadPackage: 'SUnit-Core-TheIntegrator.154'
		from: self repository.
]

{ #category : #loading }
PharoBootstrapInitialization class >> loadTestPackages [
	self testPackages do: [ :each |
		self 
			loadPackage: each
			from: self directory ]
]

{ #category : #loading }
PharoBootstrapInitialization class >> reloadBootstrapPackages [
	
	DangerousClassNotifier disable.
	
	"get the list of packages from the configuration"
	self repository directory files sorted
		do: [ :each | | mcVersion |
			mcVersion := each basenameWithoutExtension.
			((mcVersion beginsWith: 'Slot-TheIntegrator.697') or: [mcVersion isEmpty])
				ifFalse: [ self loadPackage: mcVersion from: self repository ] ].
			
	"We load the Slot package at the end because it contains several patches"
	self loadPackage: 'Slot-TheIntegrator.697' from: self repository.
	
	"check that rpackages are initialized"
	RPackageOrganizer default packageNames logCr.
]

{ #category : #loading }
PharoBootstrapInitialization class >> repository [
	^ MCDirectoryRepository new
		directory: './bootsrap-packages' asFileReference;
		yourself
]

{ #category : #'public api' }
PharoBootstrapInitialization class >> run [
	self applyPatches.
	self initializeClasses.
	self runStartup.
	self reloadBootstrapPackages.
	"self loadSUnitPackage.
	self loadTestPackages"
]

{ #category : #'class-initialization' }
PharoBootstrapInitialization class >> runInitializeOnClasses: aListOfClassName [
	aListOfClassName do: [:each | 
		UIManager default inform: 'Initializing ' , each , ' class ...'.
		(Smalltalk globals at: each) initialize ].

]

{ #category : #'public api' }
PharoBootstrapInitialization class >> runStartup [
	| manager |
	UIManager default inform: 'Running startUp ...'.

	" ---- Following code should be removed once we boostrap a version with slices 18906, 18907 and 18908 integrated 
	(will rely on classes initialization for startup list registration) : "
	SessionManager default: SessionManager initializedSessionManager.
	manager := SessionManager default.
	manager startupList
		select: [ :each | each class = ClassSessionHandler ]
		thenDo: [ :each | 
			[ each registeredClass ]
				on: KeyNotFound
				do: [ manager unregisterClassNamed: each handledId ] ].
	" ---- enf of code to remove "
	
	manager unregisterClassNamed: #BasicCommandLineHandler.	"Do not execute again the script being evaluated"
	manager installNewSession.
	manager currentSession runStartup: true.
	UIManager default inform: 'StartUp done!'
]

{ #category : #'running - tests' }
PharoBootstrapInitialization class >> runTests [
	self testPackages 
		do: [ :each | self runTestsOn: each ]
]

{ #category : #'running - tests' }
PharoBootstrapInitialization class >> runTestsOn: aPackageName [
	| result packageTags suite mcVersion |
	mcVersion := $- join: (aPackageName substrings: '-') allButLast. "remove the author and extension part".
	packageTags := (SystemOrganization categories 
		select: [ :categoryName | categoryName beginsWith: mcVersion ]) flattened.
	suite := (Smalltalk at: #TestSuite) named: mcVersion.
	packageTags
		do: [ :categoryName |
			(self testClassesFrom: categoryName)
				reject: [ :testCase | self ignoredTests includes: testCase name ]
    			thenDo: [ :testCase | testCase addToSuiteFromSelectors: suite ].
		].
	result := suite run.
	result errors
		do: [ :error |
			'Test failed: ' logCr.
			error logCr
		]

]

{ #category : #'running - tests' }
PharoBootstrapInitialization class >> testClassesFrom: aCategoryName [
	^ (SystemOrganization listAtCategoryNamed: aCategoryName)
				collect: [ :className | Smalltalk globals at: className ]
				thenSelect: [ :className |
					(className includesBehavior: (Smalltalk globals at: #TestCase))
						and: [ className isAbstract not ] ]
]

{ #category : #'running - tests' }
PharoBootstrapInitialization class >> testPackages [
	"This list of packages should be fetched from a configuration"
	^ #( 
	'SUnit-Tests-TheIntegrator.48'
	'Collections-Tests-TheIntegrator.11'
	'Kernel-Tests-TheIntegrator.16'
	"'OpalCompiler-Tests-TheIntegrator.309'" )
]
